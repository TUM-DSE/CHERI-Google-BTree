{
    "target": {
        "__comment": "which datastructures will be evaluated",

        "clht_lb":  "./structures/clht_lb.so",
        "clht_lf":  "./structures/clht_lf.so",
        "cuckoo":   "./structures/cuckoo.so",
        "art":      "./structures/art.so",
        "stdlib":   "./structures/stdlib.so",
        "tbb":      "./structures/tbb.so",
	"btree":    "./structures/btree.so"
    },
    "benchmarks": {
        "normal_benchmark": {
            "benchmark": "MBench",
            "target": [
		    "tbb"
	    ],

            "__comment": "the threadnum should be a list [] - usecases",
            "threadnum": [1, 2, 4],
            "capacity": 100000,
            "repetitions": 5,
	    "format": "register",
            "perf": {
                "do_profiling": true,
                "events": "ll_cache_rd, ll_cache_miss_rd, l1d_cache_rd, l1d_cache_wr, l1d_cache_inval, br_pred, br_mis_pred"
            },
            
            "__distribution_types": "[uniform, zipfian]",
            "distribution": "zipfian",
        
            "performfill": {
                "filling_factor": 1
            },
        
            "performquery": {
                "query_factor":   1,
                "success_factor": 0.5
            },
        
            "performdeletion": {
                "deletion_factor":  1,
                "success_factor":   0.5
            }
        },
        "normal_ycsb": {
            "benchmark": "YCSB",
	    "example__target": [
	    ],
            "target": [       
	    	"art", "btree"
	    ],
            
            "repetitions": 5,
            "__comment": "to execute load phase before each workload",
            "phase_load": true,
    
            "workloads": {
                "workloada": {
                    "recordcount": 100000,
                    
		    "operationcount": 1000000,
                    "workload": "com.yahoo.ycsb.workloads.CoreWorkload",
    
                    "readallfields": true,
    
                    "readproportion": 0.95,
                    "updateproportion": 0.05,
                    "scanproportion": 0,
                    "insertproportion": 0,
                    "requestdistribution": "zipfian"
                },
                "workloadb": {
                    "recordcount": 100000,

                    "operationcount": 1000000,
                    "workload": "com.yahoo.ycsb.workloads.CoreWorkload",
    
                    "readallfields": true,
    
                    "readproportion": 0.95,
                    "updateproportion": 0.05,
                    "scanproportion": 0,
                    "insertproportion": 0,
    
                    "requestdistribution": "zipfian"
                },
                "workloadc": {
                    "recordcount": 100000,
                    
		    "operationcount": 1000000,
                    "workload": "com.yahoo.ycsb.workloads.CoreWorkload",
    
                    "readallfields": true,
    
                    "readproportion": 1,
                    "updateproportion": 0,
                    "scanproportion": 0,
                    "insertproportion": 0,
    
                    "requestdistribution": "zipfian"
                },
                "workloadd": {
                    "recordcount": 100000,

                    "operationcount": 1000000,

                    "workload": "com.yahoo.ycsb.workloads.CoreWorkload",

                    "readallfields": true,

                    "readproportion": 0.95,
                    "updateproportion": 0,
                    "scanproportion": 0,
                    "insertproportion": 0.05,

                    "requestdistribution": "latest"
                },
		"workloadf": {
		    "recordcount": 100000,

		    "operationcount": 1000000,
	            "workload": "com.yahoo.ycsb.workloads.CoreWorkload",

		    "readallfields": true,
		    "readproportion": 0.5,
		    "updateproportion": 0,
		    "scanproportion": 0,
		    "insertproportion": 0,
		    "readmodifywriteproportion": 0.5,

		    "requestdistribution": "zipfian"
		}
            }
        }
    }
}
